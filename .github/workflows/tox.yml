name: Test Python package

on:
  workflow_call:
    inputs:
      envs:
        description: Array of tox environments to test
        required: true
        type: string
      libraries:
        description: Additional packages to install
        required: false
        default: ''
        type: string
      posargs:
        description: Positional arguments for the underlying tox test command
        required: false
        default: ''
        type: string
      toxdeps:
        description: Tox dependencies
        required: false
        default: ''
        type: string
      toxargs:
        description: Positional arguments for tox
        required: false
        default: ''
        type: string
      pytest:
        description: Whether pytest is run
        required: false
        default: true
        type: boolean
      pytest-results-summary:
        description: Whether to report test summary
        required: false
        default: false
        type: boolean
      coverage:
        description: Coverage providers to upload to
        required: false
        default: ''
        type: string
      conda:
        description: Whether to test with conda
        required: false
        default: 'auto'
        type: string
      setenv:
        description: A map of environment variables to be available when testing
        required: false
        default: ''
        type: string
      display:
        description: Whether to setup a headless display
        required: false
        default: false
        type: boolean
      cache-path:
        description: A list of files, directories, and wildcard patterns to cache and restore
        required: false
        default: ''
        type: string
      cache-key:
        description: An explicit key for restoring and saving the cache
        required: false
        default: ''
        type: string
      cache-restore-keys:
        description: An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        required: false
        default: ''
        type: string
      artifact-path:
        description: A list of files, directories, and wildcard patterns to upload as artifacts
        required: false
        default: ''
        type: string
      runs-on:
        description: Which runner image to use for each OS
        required: false
        default: ''
        type: string
      default_python:
        description: Default version of Python
        required: false
        default: '3.x'
        type: string
      fail-fast:
        description: Whether to cancel all in-progress jobs if any job fails
        required: false
        default: false
        type: boolean
      timeout-minutes:
        description: The maximum number of minutes to let a job run before GitHub automatically cancels it
        required: false
        default: 360
        type: number
      submodules:
        description: Whether to checkout submodules
        required: false
        default: true
        type: boolean
      checkout_ref:
        description: The ref to checkout
        required: false
        default: ''
        type: string
    secrets:
      CODECOV_TOKEN:
        description: Codecov upload token (for private repositories only)
        required: false

jobs:

  envs:
    name: Load tox environments
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: python -m pip install PyYAML click packaging
      - run: echo $TOX_MATRIX_SCRIPT | base64 --decode > tox_matrix.py
        env:
          TOX_MATRIX_SCRIPT: 
      - run: cat tox_matrix.py
      - id: set-outputs
        run: |
          python tox_matrix.py --envs "${{ inputs.envs }}" --libraries "${{ inputs.libraries }}" \
          --posargs "${{ inputs.posargs }}" --toxdeps "${{ inputs.toxdeps }}" \
          --toxargs "${{ inputs.toxargs }}" --pytest "${{ inputs.pytest }}" \
          --pytest-results-summary "${{ inputs.pytest-results-summary }}" \
          --coverage "${{ inputs.coverage }}" --conda "${{ inputs.conda }}" \
          --setenv "${{ inputs.setenv }}" \
          --display "${{ inputs.display }}" --cache-path "${{ inputs.cache-path }}" \
          --cache-key "${{ inputs.cache-key }}" --cache-restore-keys "${{ inputs.cache-restore-keys }}" \
          --artifact-path "${{ inputs.artifact-path }}" \
          --runs-on "${{ inputs.runs-on }}" --default-python "${{ inputs.default_python }}" \
          --timeout-minutes "${{ inputs.timeout-minutes }}"
        shell: sh

  tox:
    name: ${{ matrix.name }}
    needs: [envs]
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ matrix.timeout-minutes }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix: ${{fromJSON(needs.envs.outputs.matrix)}}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
          ref: ${{ inputs.checkout_ref }}

      - name: Cache ${{ matrix.cache_key }}
        if: ${{ matrix.cache-path != '' && matrix.cache-key != '' }}
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cache-path }}
          key: ${{ matrix.cache-key }}
          restore-keys: ${{ matrix.cache-restore-keys }}

      - name: Install dependencies
        uses: ConorMacBride/install-package@main
        with:
          brew: ${{ matrix.libraries_brew }}
          brew-cask: ${{ matrix.libraries_brew_cask }}
          apt: ${{ matrix.libraries_apt }}
          choco: ${{ matrix.libraries_choco }}

      - name: Setup Python ${{ matrix.python_version }}
        if: ${{ matrix.conda != 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true

      - name: Setup conda
        if: ${{ matrix.conda == 'true' }}
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python_version }}

      - id: set-env
        if: ${{ matrix.setenv != '' }}
        run: |
          python -m pip install PyYAML
          echo $SET_ENV_SCRIPT | base64 --decode > set_env.py
          python set_env.py "${{ matrix.setenv }}"
          rm set_env.py
        shell: sh
        env:
          SET_ENV_SCRIPT: aW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCBzeXMKCmltcG9ydCB5YW1sCgpHSVRIVUJfRU5WID0gb3MuZ2V0ZW52KCJHSVRIVUJfRU5WIikKaWYgR0lUSFVCX0VOViBpcyBOb25lOgogICAgcmFpc2UgVmFsdWVFcnJvcigiR0lUSFVCX0VOViBub3Qgc2V0LiBNdXN0IGJlIHJ1biBpbnNpZGUgR2l0SHViIEFjdGlvbnMuIikKCkRFTElNSVRFUiA9ICJFT0YiCgoKZGVmIHNldF9lbnYoZW52KToKCiAgICBlbnYgPSB5YW1sLmxvYWQoZW52LCBMb2FkZXI9eWFtbC5CYXNlTG9hZGVyKQogICAgcHJpbnQoanNvbi5kdW1wcyhlbnYsIGluZGVudD0yKSkKCiAgICBpZiBub3QgaXNpbnN0YW5jZShlbnYsIGRpY3QpOgogICAgICAgIHRpdGxlID0gImBlbnZgIG11c3QgYmUgbWFwcGluZyIKICAgICAgICBtZXNzYWdlID0gZiJgZW52YCBtdXN0IGJlIG1hcHBpbmcgb2YgZW52IHZhcmlhYmxlcyB0byB2YWx1ZXMsIGdvdCB0eXBlIHt0eXBlKGVudil9IgogICAgICAgIHByaW50KGYiOjplcnJvciB0aXRsZT17dGl0bGV9Ojp7bWVzc2FnZX0iKQogICAgICAgIGV4aXQoMSkKCiAgICBmb3IgaywgdiBpbiBlbnYuaXRlbXMoKToKCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uodiwgc3RyKToKICAgICAgICAgICAgdGl0bGUgPSAiYGVudmAgdmFsdWVzIG11c3QgYmUgc3RyaW5ncyIKICAgICAgICAgICAgbWVzc2FnZSA9IGYiYGVudmAgdmFsdWVzIG11c3QgYmUgc3RyaW5ncywgYnV0IHZhbHVlIG9mIHtrfSBoYXMgdHlwZSB7dHlwZSh2KX0iCiAgICAgICAgICAgIHByaW50KGYiOjplcnJvciB0aXRsZT17dGl0bGV9Ojp7bWVzc2FnZX0iKQogICAgICAgICAgICBleGl0KDEpCgogICAgICAgIHYgPSB2LnNwbGl0KCJcbiIpCgogICAgICAgIHdpdGggb3BlbihHSVRIVUJfRU5WLCAiYSIpIGFzIGY6CiAgICAgICAgICAgIGlmIGxlbih2KSA9PSAxOgogICAgICAgICAgICAgICAgZi53cml0ZShmIntrfT17dlswXX1cbiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiB2OgogICAgICAgICAgICAgICAgICAgIGFzc2VydCBsaW5lLnN0cmlwKCkgIT0gREVMSU1JVEVSCiAgICAgICAgICAgICAgICBmLndyaXRlKGYie2t9PDx7REVMSU1JVEVSfVxuIikKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIHY6CiAgICAgICAgICAgICAgICAgICAgZi53cml0ZShmIntsaW5lfVxuIikKICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7REVMSU1JVEVSfVxuIikKCiAgICAgICAgcHJpbnQoZiJ7a30gd3JpdHRlbiB0byBHSVRIVUJfRU5WIikKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2V0X2VudihzeXMuYXJndlsxXSkK

      - name: Setup headless display
        if: ${{ matrix.display == 'true' }}
        uses: pyvista/setup-headless-display-action@v2

      - name: Install tox
        run: python -m pip install --upgrade tox ${{ matrix.toxdeps }}
        shell: sh

      - run: python -m tox -e ${{ matrix.toxenv }} ${{ matrix.toxargs }} -- ${{ matrix.pytest_flag }} ${{ matrix.posargs }}
        shell: sh

      - if: ${{ (success() || failure()) && matrix.artifact-path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - if: ${{ (success() || failure()) && matrix.pytest-results-summary == 'true' && matrix.pytest == 'true' }}
        uses: test-summary/action@v2
        with:
          paths: "**/results.xml"

      - name: Upload coverage to artifacts
        # Even if tox fails, upload coverage
        if: ${{ (success() || failure()) && contains(matrix.coverage, 'codecov') && matrix.pytest == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage_${{ matrix.toxenv }}
          path: coverage.xml
          if-no-files-found: error

  upload-codecov:
    needs: [tox]
    permissions:
      contents: none
    runs-on: ubuntu-latest
    name: Upload Coverage
    steps:

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage
          pattern: coverage_*
          merge-multiple: false

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload report to Codecov
        if: ${{ hashFiles('coverage/') != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage
          fail_ci_if_error: true
          verbose: true
