name: Build and publish Python package

on:
  workflow_call:
    inputs:
      targets:
        description: List of build targets
        required: true
        type: string
      test_extras:
        description: Any extras_requires modifier that should be used to install the package for testing
        required: false
        default: ''
        type: string
      test_command:
        description: The command to run to test the package (will be run in a temporary directory)
        required: false
        default: ''
        type: string
      upload_to_pypi:
        description: Always upload to PyPI - if not, only upload tags
        required: false
        default: false
        type: boolean
      repository_url:
        description: The PyPI repository URL to use
        required: false
        default: ''
        type: string
      submodules:
        description: Whether to checkout submodules
        required: false
        default: true
        type: boolean
    secrets:
      pypi_password:
        required: false

jobs:

  targets:
    name: Load build targets
    runs-on: ubuntu-latest
    outputs:
      sdist: ${{ steps.set-outputs.outputs.sdist }}
      universal: ${{ steps.set-outputs.outputs.universal }}
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
# Uncomment before merging
#        with:
#           repository: 'OpenAstronomy/github-actions-workflows'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - run: python -m pip install PyYAML
      - id: set-outputs
        run: python tools/load_build_targets.py "${{ inputs.targets }}"
        shell: sh

  build_wheels:
    name: Build ${{ matrix.CIBW_BUILD }} wheels (${{ matrix.os }})
    needs: [targets]
    runs-on: ${{ matrix.os }}
    if: ${{ needs.targets.outputs.matrix != 'false' && needs.targets.outputs.universal != 'true' }}
    strategy:
      matrix: ${{fromJSON(needs.targets.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
      - name: Set up QEMU
        if: ${{ matrix.CIBW_ARCH == 'aarch64' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v2.3.1
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.CIBW_BUILD }}
          CIBW_ARCH: ${{ matrix.CIBW_ARCH }}
          CIBW_TEST_EXTRAS: ${{ inputs.test_extras }}
          CIBW_TEST_COMMAND: ${{ inputs.test_command }}
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*

  build_sdist:
    name: Build source distribution
    needs: [targets]
    if: ${{ needs.targets.outputs.sdist == 'true' && needs.targets.outputs.universal == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
      - id: build
        uses: OpenAstronomy/build-python-dist@main
        with:
          test_extras: ${{ inputs.test_extras }}
          test_command: ${{ inputs.test_command }}
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*

  build_sdist_and_wheel:
    name: Build source and wheel distribution
    needs: [targets]
    if: ${{ needs.targets.outputs.universal == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
      - id: build
        uses: OpenAstronomy/build-python-dist@main
        with:
          test_extras: ${{ inputs.test_extras }}
          test_command: ${{ inputs.test_command }}
          pure_python_wheel: 'true'
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist, build_sdist_and_wheel]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (startsWith(github.event.ref, 'refs/tags/v') || inputs.upload_to_pypi ) &&
      needs.build_wheels.result != 'failure' &&
      needs.build_sdist.result != 'failure' &&
      needs.build_sdist_and_wheel.result != 'failure'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: ${{ inputs.repository_url }}
